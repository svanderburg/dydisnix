{ pkgs
, dydisnix ? builtins.storePath @prefix@
, disnix ? builtins.storePath @DISNIX_PREFIX@
}:

let
  inherit (builtins) toXML;
in
rec {
  generateServicesXML = services:
    let servicesXSL = ./services.xsl;
    in
    pkgs.stdenv.mkDerivation {
      name = "services.xml";
      buildInputs = [ pkgs.libxslt ];
      buildCommand = ''
      (
      cat << "EOF"
      ${builtins.toXML services}
      EOF
      ) | xsltproc ${servicesXSL} - > $out
      '';
    }
  ;
  
  generateInfrastructureXML = infrastructure:
    let infrastructureXSL = "${disnix}/share/disnix/infrastructure.xsl";
    in
    pkgs.stdenv.mkDerivation {
      name = "infrastructure.xml";
      buildInputs = [ pkgs.libxslt dydisnix ];
      buildCommand = ''
      (
      cat << "EOF"
      ${builtins.toXML infrastructure}
      EOF
      ) | xsltproc ${infrastructureXSL} - > $out
      '';
    }
  ;
  
  generateDistributionXML = distribution:
    let distributionXSL = ./distribution.xsl;
    in
    pkgs.stdenv.mkDerivation {
      name = "distribution.xml";
      buildInputs = [ pkgs.libxslt ];
      buildCommand = ''
      (
      cat << "EOF"
      ${builtins.toXML distribution}
      EOF
      ) | xsltproc ${distributionXSL} - > $out
      '';
    }
  ;
  
  generatePortsXML = ports:
    let portsXSL = ./ports.xsl;
    in
    pkgs.stdenv.mkDerivation {
      name = "ports.xml";
      buildInputs = [ pkgs.libxslt ];
      buildCommand = ''
      (
      cat << "EOF"
      ${builtins.toXML ports}
      EOF
      ) | xsltproc ${portsXSL} - > $out
      '';
    }
  ;

  generateDocsXML = docs:
    let docsXSL = ./docs.xsl;
    in
    pkgs.stdenv.mkDerivation {
      name = "docs.xml";
      buildInputs = [ pkgs.libxslt ];
      buildCommand = ''
      (
      cat << "EOF"
      ${builtins.toXML docs}
      EOF
      ) | xsltproc ${docsXSL} - > $out
      '';
    }
  ;

  generatePreviousDistribution = coordinatorProfile:
    let generateMappingXSL = ./generate-mapping.xsl;
    in
    import "${(pkgs.stdenv.mkDerivation {
      name = "distribution.nix";
      buildInputs = [ pkgs.libxslt ];
      buildCommand = ''
        xsltproc ${generateMappingXSL} ${coordinatorProfile} > $out
      '';
    })}"
  ;

  /**
   * Uses a one-dimensional configuration strategy to divide services over
   * candidate target machines.
   *
   * Parameters:
   * strategy: Should be one of the following: 'greedy', 'highest-bidder',
   *   'lowest-bidder'. Greedy distributes services to machines in linear order
   *   and keeps distributing them to a machine until its capacity limit has
   *   been reached. Highest bidder distributes for each selection step a
   *   service to a machine with the most available capacity left. Lowest bidder
   *   distributes for each selection step a service to a machine with the least
   *   available capacity (that is still capable of hosting the service).
   * services: Services model
   * infrastructure: Infrastructure model
   * distribution: A candidate target mapping in which each key refers to a service and each value to a list of machine names
   * serviceProperty: Name of the property of a service. This value is supposed to be numeric and gets deducted from the machine's total capacity
   * targetProperty: Name of the property of a target machine. This value is supposed to be numeric and represents the total amount of capacity a machine provides
   *
   * Returns:
   * A candidate target mapping in which each key refers to a service and each
   * value to a list of machine names
   */
  divide = {strategy, services, infrastructure, distribution, serviceProperty, targetProperty}:
    import "${(pkgs.stdenv.mkDerivation {
      name = "distribution.nix";
      buildInputs = [ dydisnix ];
      buildCommand = 
      ''
        dydisnix-divide \
          --strategy ${strategy} \
          --services-xml ${generateServicesXML services} \
          --infrastructure-xml ${generateInfrastructureXML infrastructure} \
          --distribution-xml ${generateDistributionXML distribution} \
          --service-property ${serviceProperty} \
          --target-property ${targetProperty} \
          > $out
      '';
    })}";
  
  /**
   * Distributes services to candidates using an approximation algorithm for the
   * multiway cut problem.
   *
   * Parameters:
   * distribution: A candidate target mapping in which each key refers to a service and each value to a list of machine names
   *
   * Returns:
   * A candidate target mapping in which each key refers to a service and each
   * value to a list of machine names
   */
  multiwaycut = {distribution}:
    import "${(pkgs.stdenv.mkDerivation {
      name = "distribution.nix";
      buildInputs = [ dydisnix ];
      buildCommand =
      ''
        dydisnix-multiwaycut ${generateDistributionXML distribution} > $out
      '';
    })}";

  /**
   * Distributes services to candidates using an approximation algorithm for the
   * minimum set cover problem.
   *
   * Parameters:
   * services: Services model
   * infrastructure: Infrastructure model
   * distribution: A candidate target mapping in which each key refers to a service and each value to a list of machine names
   * targetProperty: Name of the property of a target machine. This value is supposed to be numeric and represents the total amount of capacity a machine provides
   *
   * Returns:
   * A candidate target mapping in which each key refers to a service and each
   * value to a list of machine names
   */
  minsetcover = {services, infrastructure, distribution, targetProperty}:
    import "${(pkgs.stdenv.mkDerivation {
      name = "distribution.nix";
      buildInputs = [ dydisnix ];
      buildCommand =
      ''
        dydisnix-minsetcover \
          --services-xml ${generateServicesXML services} \
          --infrastructure-xml ${generateInfrastructureXML infrastructure} \
          --distribution-xml ${generateDistributionXML distribution} \
          --target-property ${targetProperty} \
          > $out
      '';
    })}";

  /**
   * Distributes services to candidates using an approximation algorithm for the
   * graph coloring problem.
   *
   * Parameters:
   * services: Services model
   * infrastructure: Infrastructure model
   *
   * Returns:
   * A candidate target mapping in which each key refers to a service and each
   * value to a list of machine names
   */
  graphcol = {services, infrastructure}:
    import "${(pkgs.stdenv.mkDerivation {
      name = "distribution.nix";
      buildInputs = [ dydisnix ];
      buildCommand =
      ''
         dydisnix-graphcol \
          --services-xml ${generateServicesXML services} \
          --infrastructure-xml ${generateInfrastructureXML infrastructure} \
          > $out
      '';
    })}";
}
