#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -q qos_nix [-i infrastructure_nix] [OPTION]

The command \`dydisnix-env' is a wrapper around the \`disnix-env' command that
automatically deploys a service-oriented system. The major difference between
this command and \`disnix-env' is that it automatically discovers and augments
an infrastructure model if needed, and uses a QoS policy expression to
automatically map services to machines based on their technical and
non-functional properties.

Options:
  -s, --services=services_nix         Services Nix expression which describes
                                      all components of the distributed system
  -q, --qos=qos_nix                   Quality of service Nix expression which
                                      describes how to devide services onto
                                      targets based on quality of service
                                      attributes
  -i, --infrastructure=infrastructure_nix
                                      Infrastructure Nix expression which
                                      captures properties of machines in the network
  -P, --packages=packages_nix
                                      Packages Nix expression specifying the
                                      packages that should be deployed in a Nix
                                      profile mapped to each machine in the
                                      network
  -a, --augment=augment_nix           Nix epxression which augments additional
                                      attributes into the infrastructure model
      --id-resources=id_resources_nix
                                      ID resources Nix expression defining
                                      numeric ID resources
      --ids=ids_nix                   IDs Nix expression mapping services to
                                      unique IDs per resource
      --ids-service-property=PROP     Property in service model that specifies
                                      which numeric ID resources a service needs
                                      (Defaults to: requireUniqueIdsFor)
  -F, --filters=filters_nix           A Nix expression providing a catalog of
                                      custom filter algorithms
  -p, --profile=PROFILE               Name of the profile that is used for this
                                      system. Defaults to: default
      --coordinator-profile-path=PATH Path where to store the coordinator
                                      profile generations
  -m, --max-concurrent-transfers=NUM  Maximum amount of concurrent closure
                                      transfers. Defauls to: 2
      --no-migration                  Do not migrate the state of services from
                                      one machine to another, even if they have
                                      been annotated as such
      --delete-state                  Removes the obsolete state of deactivated
                                      services
      --geninfra=PATH                 Path to the infrastructure generator
      --depth-first                   Snapshots components depth-first as
                                      opposed to breadth-first. This approach is
                                      more space efficient, but slower.
      --keep=NUM                      Amount of snapshot generations to keep.
                                      Defaults to: 1
      --show-trace                    Shows a trace of the output
      --target-property=PROP          The target property of an infrastructure
                                      model, that specifies how to connect to
                                      the remote Disnix interface. (Defaults to
                                      hostname)
      --interface=INTERFACE           Path to executable that communicates with
                                      a Disnix interface. Defaults to:
                                      disnix-ssh-client
  -h, --help                          Shows the usage of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
  DYDISNIX_GENINFRA          Executable to invoke to dynamically capture an
                             infrastructure model
EOF
}

# Import checks
source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:q:a:P:F:p:m:h -l services:,infrastructure:,qos:,augment:,packages:,id-resources:,ids:,ids-service-property:,filters:,profile:,coordinator-profile-path:,max-concurrent-transfers:,no-migration,delete-state,geninfra:,depth-first,keep:,show-trace,interface:,target-property:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`@readlink@ -f $2`
            ;;
        -q|--qos)
            qosFile=`@readlink@ -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`@readlink@ -f $2`
            ;;
        -a|--augment)
            augmentFile=`@readlink@ -f $2`
            ;;
        -P|--packages)
            packagesFile=`@readlink@ -f $2`
            packagesArg="-P $packagesFile"
            ;;
        -F|--filters)
            filtersArg="--filters $2"
            ;;
        --id-resources)
            idResourcesFile=`@readlink@ -f $2`
            ;;
        --ids)
            idsFile=`@readlink@ -f $2`
            ;;
        --ids-service-property)
            idsServicePropertyArg="--service-property $2"
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --no-migration)
            noMigrationArg="--no-migration"
            ;;
        --delete-state)
            deleteStateArg="--delete-state"
            ;;
        --geninfra)
            geninfra=$2
            ;;
        --depth-first)
            depthFirstArg="--depth-first"
            ;;
        --keep)
            keepArg="--keep $2"
            ;;
        --show-trace)
            showTraceArg="--show-trace"
            ;;
        --interface)
            interfaceArg="--interface $2"
            ;;
        --target-property)
            targetPropertyArg="--target-property $2"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile

if [ "$qosFile" = "" ]
then
    echo "ERROR: A quality of service model must be specified!" >&2
    exit 1
fi

if [ "$geninfra" = "" ]
then
    if [ "$DYDISNIX_GENINFRA" = "" ] && [ "$infrastructureFile" = "" ]
    then
        echo "ERROR: Either an infrastructure generator or an infrastructure expression must be specified!" >&2
        exit 1
    else
        geninfra=$DYDISNIX_GENINFRA
    fi
fi

checkTmpDir

# Execute operation

if [ "$infrastructureFile" = "" ]
then
    echo "[coordinator]: Capturing infrastructure..." >&2
    $geninfra > $TMPDIR/infrastructure.nix
    infrastructureFile=$TMPDIR/infrastructure.nix
    echo "[coordinator]: Captured infrastructure file: $infrastructureFile" >&2
fi

if [ "$augmentFile" != "" ]
then
    echo "[coordinator]: Augmenting the captured infrastructure..." >&2
    infrastructureFile=`dydisnix-augment-infra --infrastructure $infrastructureFile --augment $augmentFile $profileArg $coordinatorProfilePathArg`
fi

echo "[coordinator]: Using infrastructure model: $infrastructureFile" >&2

echo "[coordinator]: Generating a distribution model..." >&2
distribution=`dydisnix-gendist --services $servicesFile --infrastructure $infrastructureFile --qos $qosFile --no-out-link $profileArg $coordinatorProfilePathArg $interfaceArg $targetPropertyArg $showTraceArg`
echo "[coordinator]: Using generated distribution model: $distribution" >&2

if [ "$idsFile" != "" ]
then
    echo "[coordinator]: Updating the ID assignments..." >&2

    if [ -e "$idsFile" ]
    then
        idsParam="--ids $idsFile"
    fi

    dydisnix-id-assign --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution --id-resources $idResourcesFile $idsParam $filtersArg $idsServicePropertyArg --output-file $idsFile
fi

echo "[coordinator]: Deploying the system..." >&2
disnix-env --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution $packagesArg $profileArg $coordinatorProfilePathArg $maxConcurrentTransfersArg $noMigrateStateArg $deleteStateArg $depthFirstArg $keepArg $showTraceArg
