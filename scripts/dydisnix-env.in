#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_expr -q qos_expr [-i infrastructure_expr] [options]

The command `dydisnix-env' is a wrapper around the `disnix-env' command that
automatically deploys a service-oriented system. The major difference between
this command and `disnix-env' is that it automatically discovers and augments
an infrastructure model if needed, and uses a QoS policy expression to
automatically map services to machines based on their technical and
non-functional properties.

Options:
  -s, --services                      Services Nix expression which describes
                                      all components of the distributed system
  -q, --qos                           Quality of service Nix expression which
                                      describes how to devide services onto
                                      targets based on quality of service
                                      attributes
  -i, --infrastructure                Infrastructure Nix expression which
                                      captures properties of machines in the network
  -a, --augment                       Nix epxression which augments additional
                                      attributes into the infrastructure model
      --ports                         Filename of a ports expression containing
                                      port assignments. It will be updated when
                                      a deployment changes. If not provided, no
                                      port assignment will be done
      --ports-service-property        The name of the attribute that indicates
                                      the port assign type (defaults to:
                                      portAssign)
  -p, --profile                       Name of the profile that is used for this
                                      system. Defaults to: default
      --coordinator-profile-path      Path where to store the coordinator
                                      profile generations
  -m, --max-concurrent-transfers=NUM  Maximum amount of concurrent closure
                                      transfers. Defauls to: 2
      --no-migration                  Do not migrate the state of services from
                                      one machine to another, even if they have
                                      been annotated as such
      --no-delete-state               Do not remove the state of deactivated
                                      services
      --geninfra                      Path to the infrastructure generator
      --show-trace                    Shows a trace of the output
  -h, --help                          Shows the usage of this command

Environment:
  DYDISNIX_GENINFRA    Executable to invoke to dynamically capture an
                       infrastructure model
EOF
}

# Import checks
source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:q:a:p:m:h -l services:,infrastructure:,qos:,augment:,ports:,ports-service-property:,profile:,coordinator-profile-path:,max-concurrent-transfers:,no-migration,no-delete-state,geninfra:,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
	    servicesFile=`readlink -f $2`
	    ;;
	-q|--qos)
	    qosFile=`readlink -f $2`
	    ;;
	-i|--infrastructure)
	    infrastructureFile=`readlink -f $2`
	    ;;
	-a|--augment)
	    augmentFile=`readlink -f $2`
	    ;;
	--ports)
	    portsFile=`readlink -f $2`
	    ;;
	--ports-service-property)
	    portsServicePropertyArg="--service-property $2"
	    ;;
	-p|--profile)
	    profileArg="--profile $2"
	    ;;
	--coordinator-profile-path)
	    coordinatorProfilePathArg="--coordinator-profile-path $2"
	    ;;
	-m|--max-concurrent-transfers)
	    maxConcurrentTransfersArg="-m $2"
	    ;;
	--no-migration)
	    noMigrationArg="--no-migration"
	    ;;
	--no-delete-state)
	    noDeleteStateArg="--no-delete-state"
	    ;;
	--geninfra)
	    geninfra=$2
	    ;;
	--show-trace)
	    showTraceArg="--show-trace"
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile

if [ "$qosFile" = "" ]
then
    echo "ERROR: A quality of service model must be specified!" >&2
    exit 1
fi

if [ "$geninfra" = "" ]
then
    if [ "$DYDISNIX_GENINFRA" = "" ] && [ "$infrastructureFile" = "" ]
    then
	echo "ERROR: Either an infrastructure generator or an infrastructure expression must be specified!" >&2
	exit 1
    else
	geninfra=$DYDISNIX_GENINFRA
    fi
fi

checkTmpDir

# Execute operation

if [ "$infrastructureFile" = "" ]
then
    echo "[coordinator]: Capturing infrastructure..." >&2
    $geninfra > $TMPDIR/infrastructure.nix
    infrastructureFile=$TMPDIR/infrastructure.nix
else
    echo "[coordinator]: Using infrastructure model: $infrastructureFile" >&2
fi

if [ "$augmentFile" != "" ]
then
    echo "[coordinator]: Augmenting the captured infrastructure..." >&2
    infrastructureFile=`dydisnix-augment-infra --infrastructure $infrastructureFile --augment $augmentFile $profileArg $coordinatorProfilePathArg`
fi

echo "[coordinator]: Generating a distribution model..." >&2
distribution=`dydisnix-gendist --services $servicesFile --infrastructure $infrastructureFile --qos $qosFile $profileArg $coordinatorProfilePathArg $showTraceArg`

if [ "$portsFile" != "" ]
then
    echo "[coordinator]: Updating the port assignments..." >&2
    dydisnix-port-assign --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution --ports $portsFile $portsServicePropertyArg > $TMPDIR/ports.nix
    mv $TMPDIR/ports.nix $portsFile
fi

echo "[coordinator]: Redeploying the system..." >&2
disnix-env --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution $profileArg $coordinatorProfilePathArg $maxConcurrentTransfersArg $noMigrateStateArg $noDeleteStateArg $showTraceArg
