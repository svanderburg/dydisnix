#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -i infrastructure_nix [-q qos_nix] [OPTION]

The command \`dydisnix-gendist' automatically generates a distribution model
using properties in the service model and infrastructure model. A QoS policy
expression can be used to program a strategy that maps services to machines.

Options:
  -s, --services=services_nix     Services Nix expression which describes all
                                  components of the distributed system
  -i, --infrastructure=infrastructure_nix
                                  Infrastructure Nix expression which captures
                                  properties of machines in the network
  -q, --qos=qos_nix               Quality of service Nix expression which
                                  describes how to devide services onto targets
                                  based on quality of service attributes
      --filter-buildable          Checks for each combination whether the
                                  service can be built (may take some time)
      --output-xml                Specifies that the output should be in XML not
                                  the Nix expression language.
      --stdout                    Indicates that not the output filename, but
                                  the output itself should be displayed on the
                                  standard output.
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --target-property=PROP      The target property of an infrastructure model,
                                  that specifies how to connect to the remote
                                  Disnix interface. (Defaults to hostname)
      --interface=INTERFACE       Path to executable that communicates with a
                                  Disnix interface. Defaults to:
                                  disnix-ssh-client
      --no-out-link               Do not create a 'result' symlink
      --show-trace                Shows a trace of the output
  -h, --help                      Shows the usage of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
EOF
}

# Autoconf settings

export prefix=@prefix@

# Import checks

source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:q:p:h -l services:,infrastructure:,qos:,filter-buildable,output-xml,stdout,profile:,coordinator-profile-path:,interface:,target-property:,no-out-link,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`readlink -f $2`
            ;;
        -q|--qos)
            qosFile=`readlink -f $2`
            qosArg="--argstr qosFile $(readlink -f $qosFile)"
            ;;
        --filter-buildable)
            filterBuildable=1
            ;;
        --output-xml)
            exprArg="--arg outputExpr false"
            ;;
        --stdout)
            displayStdout=1
            ;;
        -p|--profile)
            profile=$2
            ;;
        --coordinator-profile-path)
            coordinatorProfilePath=$2
            ;;
        --interface)
            interfaceArg="--interface $2"
            ;;
        --target-property)
            targetPropertyArg="--target-property $2"
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
    esac

    shift
done

# Validate the given options

checkServicesFile
checkInfrastructureFile
checkNoOutLink
checkShowTrace
checkTmpDir

if [ "$profile" = "" ]
then
    profile="default"
fi

if [ "$coordinatorProfilePath" = "" ]
then
    coordinatorProfilePath="/nix/var/nix/profiles/per-user/$(whoami)/disnix-coordinator"
fi

if [ -f $coordinatorProfilePath/$profile ]
then
    # Symlinks are copied verbatim into the Nix store, so dereference it first
    coordinatorProfile=`mktemp -p $TMPDIR`
    cp $coordinatorProfilePath/$profile $coordinatorProfile
    coordinatorProfileArg="--arg coordinatorProfile $coordinatorProfile"
fi

# Execute operation

if [ "$filterBuildable" = "1" ]
then
    initialDistribution=`$0 --services $servicesFile --infrastructure $infrastructureFile`
    filteredDistribution=`mktemp -p $TMPDIR`
    dydisnix-filter-buildable --services $servicesFile --infrastructure $infrastructureFile --distribution $initialDistribution $interfaceArg $targetPropertyArg > $filteredDistribution
    initialDistributionArg="--argstr distributionFile $filteredDistribution"
fi

result=$(nix-build --argstr servicesFile "$(readlink -f $servicesFile)" \
          --argstr infrastructureFile "$(readlink -f $infrastructureFile)" \
          $initialDistributionArg \
          $qosArg \
          $exprArg \
          $coordinatorProfileArg \
          $noOutLinkArg \
          $showTraceArg \
          "$(readlink -f @datadir@/@PACKAGE@/gendist.nix)")

if [ "$displayStdout" = "1" ]
then
    cat "$result"
else
    echo "$result"
fi

if [ "$filterBuildable" = "1" ]
then
    rm -f $filteredDistribution
fi

rm -f $coordinatorProfile
