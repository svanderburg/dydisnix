#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_expr -i infrastructure_expr [-q qos_expr] [options]

The command `dydisnix-gendist` automatically generates a distribution model
using properties in the service model and infrastructure model. A QoS policy
expression can be used to program a strategy that maps services to machines.

Options:
  -s, --services                  Services Nix expression which describes all
                                  components of the distributed system
  -i, --infrastructure            Infrastructure Nix expression which captures
                                  properties of machines in the network
  -q, --qos                       Quality of service Nix expression which
                                  describes how to devide services onto targets
                                  based on quality of service attributes
      --filter-buildable          Checks for each combination whether the
                                  service can be built (may take some time)
      --xml                       Output XML version of the distribution instea
                                  of a Nix expression
  -p, --profile                   Name of the profile that is used for this
                                  system. Defaults to: default
      --coordinator-profile-path  Path where to store the coordinator profile
                                  generations
      --no-out-link               Do not create a 'result' symlink
      --show-trace                Shows a trace of the output
  -h, --help                      Shows the usage of this command
EOF
}

# Autoconf settings

export prefix=@prefix@

# Import checks

source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:q:p:h -l services:,infrastructure:,qos:,filter-buildable,xml,profile:,coordinator-profile-path:,no-out-link,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)	    
	    servicesFile=`readlink -f $2`
	    ;;
	-i|--infrastructure)
	    infrastructureFile=`readlink -f $2`
	    ;;
	-q|--qos)
	    qosFile=`readlink -f $2`
	    qosArg="--argstr qosFile $(readlink -f $qosFile)"
	    ;;
	--filter-buildable)
	    filterBuildable=1
	    ;;
	--xml)
	    exprArg="--arg outputExpr false"
	    ;;
	-p|--profile)
	    profile=$2
	    ;;
	--coordinator-profile-path)
	    coordinatorProfilePath=$2
	    ;;
	--no-out-link)
	    noOutLink=1
	    ;;
	--show-trace)
	    showTrace=1
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile
checkInfrastructureFile
checkNoOutLink
checkShowTrace
checkTmpDir

if [ "$profile" = "" ]
then
    profile="default"
fi

if [ "$coordinatorProfilePath" = "" ]
then
    coordinatorProfilePath="/nix/var/nix/profiles/per-user/$(whoami)/disnix-coordinator"
fi

if [ -f $coordinatorProfilePath/$profile ]
then
    # Symlinks are copied verbatim into the Nix store, so dereference it first
    coordinatorProfile=`mktemp -p $TMPDIR`
    cp $coordinatorProfilePath/$profile $coordinatorProfile
    coordinatorProfileArg="--arg coordinatorProfile $coordinatorProfile"
fi

# Execute operation

if [ "$filterBuildable" = "1" ]
then
    initialDistribution=`$0 --services $servicesFile --infrastructure $infrastructureFile`
    initialDistributionXML=`$0 --services $servicesFile --infrastructure $infrastructureFile --xml`
    filteredDistribution=`mktemp -p $TMPDIR`
    dydisnix-filter-buildable --services $servicesFile --infrastructure $infrastructureFile --distribution $initialDistribution --distribution-xml $initialDistributionXML > $filteredDistribution
    initialDistributionArg="--argstr distributionFile $filteredDistribution"
fi

nix-build --argstr servicesFile "$(readlink -f $servicesFile)" \
          --argstr infrastructureFile "$(readlink -f $infrastructureFile)" \
	  $initialDistributionArg \
	  $qosArg \
	  $exprArg \
	  $coordinatorProfileArg \
	  $noOutLinkArg \
	  $showTraceArg \
          "$(readlink -f @datadir@/@PACKAGE@/gendist.nix)"

if [ "$filterBuildable" = "1" ]
then
    rm -f $filteredDistribution
fi

rm -f $coordinatorProfile
