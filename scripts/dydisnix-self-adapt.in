#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 -s services_expr -q qos_expr [options]"
    echo "Options:"
    echo
    echo "-s,--services               Services Nix expression which describes all components of the distributed system"
    echo "-q,--qos                    Quality of service Nix expression which describes how to devide services onto targets based on quality of service attributes"
    echo "-a,--augment                Nix epxression which augments additional attributes into the infrastructure model"
    echo "--ports                     Filename of a ports expression containing port assignments. It will be updated when a deployment changes. If not provided, no port assignment will be done"
    echo "--ports-service-property    The name of the attribute that indicates the port assign type (defaults to: portAssign)"
    echo "-p,--profile                Name of the profile that is used for this system. Defaults to: default"
    echo "--coordinator-profile-path  Path where to store the coordinator profile generations"
    echo "--interval                  Sleep interval (defaults to 5)"
    echo "--geninfra                  Path to the infrastructure generator"
    echo "-h,--help                   Shows the usage of this command"
}

# Import checks

source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:q:a:p:h -l services:,qos:,augment:,ports:,ports-service-property:,interval:,profile:,coordinator-profile-path:,geninfra:,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
	    servicesFile=`readlink -f $2`
	    ;;
	-q|--qos)
	    qosFile=`readlink -f $2`
	    ;;
	-a|--augment)
	    augmentFile=`readlink -f $2`
	    ;;
	--ports)
	    portsFile=`readlink -f $2`
	    ;;
	--ports-service-property)
	    portsServicePropertyArg="--service-property $2"
	    ;;
	--interval)
	    interval=$2
	    ;;
	-p|--profile)
	    profileArg="--profile $2"
	    ;;
	--coordinator-profile-path)
	    coordinatorProfilePathArg="--coordinator-profile-path $2"
	    ;;
	--geninfra)
	    geninfra=$2
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile

if [ "$qosFile" = "" ]
then
    echo "ERROR: A quality of service model must be specified!" >&2
    exit 1
fi

if [ "$interval" = "" ]
then
    interval=5
fi

if [ "$geninfra" = "" ]
then
    if [ "$DYDISNIX_GENINFRA" = "" ]
    then
	echo "ERROR: An infrastructure generator must be specified!" >&2
	exit 1
    else
	geninfra="$DYDISNIX_GENINFRA"
    fi
fi

checkTmpDir

# Execute operation

while true
do
    # Capture the infrastructure configuration
    infrastructureFile="$TMPDIR/infrastructure_captured.nix"
    $geninfra > $infrastructureFile
    
    # Augment the infrastructure, if needed
    if [ "$augmentFile" != "" ]
    then
	infrastructureFile=`dydisnix-augment-infra --infrastructure $infrastructureFile --augment $augmentFile`
    fi
    
    # Compute the hash of the evaluated infrastructure, so that changes can be detected by comparing hashes
    hash=$(nix-instantiate --eval-only --strict --xml $infrastructureFile | sha256sum -)
    
    # If a change has been detected, do a redeployment
    if [ "$hash" != "$previousHash" ]
    then
	distribution=`dydisnix-gendist --services $servicesFile --infrastructure $infrastructureFile --qos $qosFile $profileArg $coordinatorProfilePathArg`
	
	if [ "$portsFile" != "" ]
	then
	    dydisnix-port-assign --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution --ports $portsFile $portsServicePropertyArg > $TMPDIR/ports.nix
	    mv $TMPDIR/ports.nix $portsFile
	fi
	
	disnix-env --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution $profileArg $coordinatorProfilePathArg
	previousHash="$hash"
    fi
    
    # Wait for a while, and then check again
    echo "Waiting for $interval seconds..." >&2
    sleep $interval
done
