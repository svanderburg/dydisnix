#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -q qos_nix [OPTION]

The command \`dydisnix-self-adapt' continuously monitors for changes in the
infrastructure model and automatically reconfigures and redeploys a system when
a change has been detected.

Options:
  -s, --services=services_nix         Services Nix expression which describes
                                      all components of the distributed system
  -q, --qos=qos_nix                   Quality of service Nix expression which
                                      describes how to devide services onto
                                      targets based on quality of service
                                      attributes
  -a, --augment=augment_nix           Nix epxression which augments additional
                                      attributes into the infrastructure model
      --ports=ports_nix               Filename of a ports expression containing
                                      port assignments. It will be updated when
                                      a deployment changes. If not provided, no
                                      port assignment will be done
      --ports-service-property=PROP   The name of the attribute that indicates
                                      the port assign type (defaults to:
                                      portAssign)
  -p, --profile=PROFILE               Name of the profile that is used for this
                                      system. Defaults to: default
      --coordinator-profile-path=PATH Path where to store the coordinator
                                      profile generations
  -m, --max-concurrent-transfers=NUM  Maximum amount of concurrent closure
                                      transfers. Defauls to: 2
      --interval=NUM                  Sleep interval (defaults to 5)
      --no-migration                  Do not migrate the state of services from
                                      one machine to another, even if they have
                                      been annotated as such
      --no-delete-state               Do not remove the state of deactivated
                                      services
      --geninfra=PATH                 Path to the infrastructure generator
      --snapshot                      Regularly snapshot the state of every
                                      stateful service
      --reconstruct                   Attempts to reconstruct the deployment
                                      manifest each time a change in the
                                      infrastructure has been detected
      --depth-first                   Snapshots components depth-first as
                                      opposed to breadth-first. This approach is
                                      more space efficient, but slower.
      --keep=NUM                      Amount of snapshot generations to keep.
                                      Defaults to: 1
      --show-trace                    Shows a trace of the output
  -h, --help                          Shows the usage of this command

Environment:
  DYDISNIX_GENINFRA    Executable to invoke to dynamically capture an
                       infrastructure model
EOF
}

# Import checks

source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:q:a:p:m:h -l services:,qos:,augment:,ports:,ports-service-property:,interval:,profile:,coordinator-profile-path:,max-concurrent-transfers:,no-migration,no-delete-state,geninfra:,snapshot,reconstruct,depth-first,keep:,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -q|--qos)
            qosFile=`readlink -f $2`
            ;;
        -a|--augment)
            augmentFile=`readlink -f $2`
            ;;
        --ports)
            portsFile=`readlink -f $2`
            ;;
        --ports-service-property)
            portsServicePropertyArg="--service-property $2"
            ;;
        --interval)
            interval=$2
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        --coordinator-profile-path)
            coordinatorProfilePathArg="--coordinator-profile-path $2"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --no-migration)
            noMigrationArg="--no-migration"
            ;;
        --no-delete-state)
            noDeleteStateArg="--no-delete-state"
            ;;
        --geninfra)
            geninfra=$2
            ;;
        --snapshot)
            snapshot=1
            ;;
        --reconstruct)
            reconstruct=1
            ;;
        --depth-first)
            depthFirstArg="--depth-first"
            ;;
        --keep)
            keepArg="--keep $2"
            ;;
        --show-trace)
            showTraceArg="--show-trace"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile

if [ "$qosFile" = "" ]
then
    echo "ERROR: A quality of service model must be specified!" >&2
    exit 1
fi

if [ "$interval" = "" ]
then
    interval=5
fi

if [ "$geninfra" = "" ]
then
    if [ "$DYDISNIX_GENINFRA" = "" ]
    then
        echo "ERROR: An infrastructure generator must be specified!" >&2
        exit 1
    else
        geninfra="$DYDISNIX_GENINFRA"
    fi
fi

checkTmpDir

# Execute operation

while true
do
    # Capture the infrastructure configuration
    
    echo "[coordinator]: Capturing infrastructure..." >&2
    infrastructureFile="$TMPDIR/infrastructure_captured.nix"
    $geninfra > $infrastructureFile
    echo "[coordinator]: Captured infrastructure file: $infrastructureFile" >&2
    
    # Augment the infrastructure, if needed
    if [ "$augmentFile" != "" ]
    then
        echo "[coordinator]: Augmenting the captured infrastructure..." >&2
        infrastructureFile=`dydisnix-augment-infra --infrastructure $infrastructureFile --augment $augmentFile`
    fi
    
    echo "[coordinator]: Using infrastructure model: $infrastructureFile" >&2
    
    # If requested, take a snapshot of the entire environment
    if [ "$snapshot" = "1" ]
    then
        echo "[coordinator]: Capturing the state..." >&2
        disnix-snapshot $profileArg $coordinatorProfileArg $maxConcurrentTransfersArg
    fi
    
    # Compute the hash of the evaluated infrastructure, so that changes can be detected by comparing hashes
    hash=$(nix-instantiate --eval-only --strict --xml $infrastructureFile | sha256sum -)
    
    # If a change has been detected, do a redeployment
    if [ "$hash" != "$previousHash" ]
    then
        echo "[coordinator]: A change in the infrastructure has been detected!" >&2
        
        if [ "$reconstruct" = "1" ]
        then
            echo "[coordinator]: Reconstructing manifest..." >&2
            disnix-reconstruct $profileArg $coordinatorProfilePathArg $maxConcurrentTransfersArg $showTraceArg $infrastructureFile || true
        fi
        
        echo "[coordinator]: Generating a new distribution model..." >&2
        distribution=`dydisnix-gendist --services $servicesFile --infrastructure $infrastructureFile --qos $qosFile $profileArg $coordinatorProfilePathArg $showTraceArg`
        echo "[coordinator]: Using generated distribution model: $distribution" >&2
        
        if [ "$portsFile" != "" ]
        then
            echo "[coordinator]: Updating the port assignments..." >&2
            dydisnix-port-assign --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution --ports $portsFile $portsServicePropertyArg > $TMPDIR/ports.nix
            mv $TMPDIR/ports.nix $portsFile
        fi
        
        echo "[coordinator]: Redeploying the system..." >&2
        disnix-env --services $servicesFile --infrastructure $infrastructureFile --distribution $distribution $profileArg $coordinatorProfilePathArg $maxConcurrentTransfersArg $noMigrationArg $noDeleteStateArg $depthFirstArg $keepArg $showTraceArg
        previousHash="$hash"
    fi
    
    # Wait for a while, and then check again
    echo "[coordinator]: Waiting for $interval seconds..." >&2
    sleep $interval
done
