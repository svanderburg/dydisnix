#!/bin/bash -e

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix [OPTION]
  or: $0 -i infrastructure_nix [OPTION]
  or: $0 -d distribution_nix -i infrastructure_nix [OPTION]
  or: $0 -p ports_nix [OPTION]
  or: $0 --docs docs.nix [OPTION]
  or: $0 --id-resources idresources.nix [OPTION]
  or: $0 --ids ids.nix [OPTION]

The command \`dydisnix-xml' generates XML representations of the Disnix models
so that they can be used by external tools.

Options:
  -s, --services=services_nix  Services Nix expression which describes all components
                               of the distributed system
  -i, --infrastructure=infrastructure_nix
                               Infrastructure Nix expression which captures properties
                               of machines in the network
  -d, --distribution=distribution_nix
                               Distribution Nix expression mapping services to machines
  -p, --ports=ports_nix        Port assignment expression assigning port numbers to
                               services
      --docs=docs_nix          Documentation configuration expression
      --id-resources=id_resources_nix
                               ID resources Nix expression defining numeric ID
                               resources
      --ids=ids_nix            IDs Nix expression mapping services to unique IDs per
                               resource
      --extra-params=PARAMS    A string with an attribute set in the Nix
                               expression language propagating extra parameters
                               to the input models
      --no-out-link            Do not create a result symlink
      --show-trace             Shows a trace of the output
  -h, --help                   Shows the usage of this command

Environment:
  DISNIX_TARGET_PROPERTY  Sets the target property of an infrastructure model,
                          that specifies how to connect to the remote Disnix
                          interface. (Defaults to: hostname)
EOF
}

# Autoconf settings
export prefix=@prefix@

# Import checks
source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:i:d:p:h -l services:,infrastructure:,distribution:,ports:,docs:,id-resources:,ids:,extra-params:,no-out-link,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`@readlink@ -f $2`
            ;;
        -i|--infrastructure)
            infrastructureFile=`@readlink@ -f $2`
            ;;
        -d|--distribution)
            distributionFile=`@readlink@ -f $2`
            ;;
        -p|--ports)
            portsFile=`@readlink@ -f $2`
            ;;
        --docs)
            docsFile=`@readlink@ -f $2`
            ;;
        --id-resources)
            idResourcesFile=`@readlink@ -f $2`
            ;;
        --ids)
            idsFile=`@readlink@ -f $2`
            ;;
        --extra-params)
            extraParamsArg=("--arg" "extraParams" "$2")
            ;;
        --no-out-link)
            noOutLinkArg="--no-out-link"
            ;;
        --show-trace)
            showTraceArg="--show-trace"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
    esac

    shift
done

checkTargetProperty

# Execute operation

if [ "$servicesFile" != "" ]
then
    nix-build $showTraceArg --arg servicesFile $servicesFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg "${extraParamsArg[@]}" \
        -A servicesToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$distributionFile" != "" ] && [ "$infrastructureFile" != "" ]
then
    nix-build $showTraceArg --arg distributionFile $distributionFile \
        --arg infrastructureFile $infrastructureFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg "${extraParamsArg[@]}" \
        -A distributionToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$infrastructureFile" != "" ]
then
    nix-build $showTraceArg --arg infrastructureFile $infrastructureFile \
        --argstr defaultTargetProperty $targetProperty \
        -A infrastructureToXML \
        $noOutLinkArg $showTraceArg \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$portsFile" != "" ]
then
    nix-build $showTraceArg --arg portsFile $portsFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg \
        -A portsToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$docsFile" != "" ]
then
    nix-build $showTraceArg --arg docsFile $docsFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg \
        -A docsToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$idResourcesFile" != "" ]
then
    nix-build $showTraceArg --arg idResourcesFile $idResourcesFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg \
        -A idResourcesToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
elif [ "$idsFile" != "" ]
then
    nix-build $showTraceArg --arg idsFile $idsFile \
        --argstr defaultTargetProperty $targetProperty \
        $noOutLinkArg $showTraceArg \
        -A idsToXML \
        --arg disnix 'builtins.storePath @DISNIX_PREFIX@' \
        --arg dydisnix 'builtins.storePath @prefix@' \
        @datadir@/@PACKAGE@/toXML.nix
else
    echo "Don't know how to generate XML from the given input files. Are all models correctly specified?" >&2
    exit 1
fi
